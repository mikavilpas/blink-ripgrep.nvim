// Note: This file is autogenerated. Do not edit it directly.
//
// Describes the contents of the test directory, which is a blueprint for
// files and directories. Tests can create a unique, safe environment for
// interacting with the contents of such a directory.
//
// Having strong typing for the test directory contents ensures that tests can
// be written with confidence that the files and directories they expect are
// actually found. Otherwise the tests are brittle and can break easily.

import { z } from "zod"

export const MyTestDirectorySchema = z.object({
  name: z.literal("test-environment/"),
  type: z.literal("directory"),
  contents: z.object({
    ".config": z.object({
      name: z.literal(".config/"),
      type: z.literal("directory"),
      contents: z.object({
        nvim: z.object({
          name: z.literal("nvim/"),
          type: z.literal("directory"),
          contents: z.object({
            "init.lua": z.object({
              name: z.literal("init.lua"),
              type: z.literal("file"),
              extension: z.literal("lua"),
              stem: z.literal("init."),
            }),
          }),
        }),
      }),
    }),
    "config-modifications": z.object({
      name: z.literal("config-modifications/"),
      type: z.literal("directory"),
      contents: z.object({
        ".gitkeep": z.object({
          name: z.literal(".gitkeep"),
          type: z.literal("file"),
          extension: z.literal(""),
          stem: z.literal(".gitkeep"),
        }),
        "use_case_sensitive_search.lua": z.object({
          name: z.literal("use_case_sensitive_search.lua"),
          type: z.literal("file"),
          extension: z.literal("lua"),
          stem: z.literal("use_case_sensitive_search."),
        }),
        "use_manual_mode.lua": z.object({
          name: z.literal("use_manual_mode.lua"),
          type: z.literal("file"),
          extension: z.literal("lua"),
          stem: z.literal("use_manual_mode."),
        }),
      }),
    }),
    "initial-file.txt": z.object({
      name: z.literal("initial-file.txt"),
      type: z.literal("file"),
      extension: z.literal("txt"),
      stem: z.literal("initial-file."),
    }),
    limited: z.object({
      name: z.literal("limited/"),
      type: z.literal("directory"),
      contents: z.object({
        "main-project-file.lua": z.object({
          name: z.literal("main-project-file.lua"),
          type: z.literal("file"),
          extension: z.literal("lua"),
          stem: z.literal("main-project-file."),
        }),
        subproject: z.object({
          name: z.literal("subproject/"),
          type: z.literal("directory"),
          contents: z.object({
            "file1.lua": z.object({
              name: z.literal("file1.lua"),
              type: z.literal("file"),
              extension: z.literal("lua"),
              stem: z.literal("file1."),
            }),
            "file2.lua": z.object({
              name: z.literal("file2.lua"),
              type: z.literal("file"),
              extension: z.literal("lua"),
              stem: z.literal("file2."),
            }),
            "file3.lua": z.object({
              name: z.literal("file3.lua"),
              type: z.literal("file"),
              extension: z.literal("lua"),
              stem: z.literal("file3."),
            }),
          }),
        }),
      }),
    }),
    "line-file.lua": z.object({
      name: z.literal("line-file.lua"),
      type: z.literal("file"),
      extension: z.literal("lua"),
      stem: z.literal("line-file."),
    }),
    "other-file.lua": z.object({
      name: z.literal("other-file.lua"),
      type: z.literal("file"),
      extension: z.literal("lua"),
      stem: z.literal("other-file."),
    }),
  }),
})

export const MyTestDirectoryContentsSchema =
  MyTestDirectorySchema.shape.contents
export type MyTestDirectoryContentsSchemaType = z.infer<
  typeof MyTestDirectorySchema
>

export type MyTestDirectory = MyTestDirectoryContentsSchemaType["contents"]

export const testDirectoryFiles = z.enum([
  ".config/nvim/init.lua",
  ".config/nvim",
  ".config",
  "config-modifications/.gitkeep",
  "config-modifications/use_case_sensitive_search.lua",
  "config-modifications/use_manual_mode.lua",
  "config-modifications",
  "initial-file.txt",
  "limited/main-project-file.lua",
  "limited/subproject/file1.lua",
  "limited/subproject/file2.lua",
  "limited/subproject/file3.lua",
  "limited/subproject",
  "limited",
  "line-file.lua",
  "other-file.lua",
  ".",
])
export type MyTestDirectoryFile = z.infer<typeof testDirectoryFiles>
